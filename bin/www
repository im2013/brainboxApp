#!/usr/bin/env node
var debug = require('debug')('brainbox:server');
var http = require('http');
const session = require('express-session');
var createError = require('http-errors');
var express = require('express');
var path = require('path');
var cookieParser = require('cookie-parser');
var logger = require('morgan');
const bodyParser = require('body-parser');
const mysql = require('mysql2');
const fs = require('fs');

var app = express();
var port = process.env.PORT || '3000';
app.set('port', port);

app.use(
  session({
    secret: '123456',
    resave: true,
    saveUninitialized: true,
  })
);

const config = {
  host: 'j5zntocs2dn6c3fj.chr7pe7iynqr.eu-west-1.rds.amazonaws.com',
  user: 'a726g1l6ztxc8my1',
  password: 'apk7gwi4013j7k3v',
  database: 'as1u1hagjjf2ohme',
  waitForConnections: true,
  connectionLimit: 10,
  queueLimit: 0,
};

const server = http.createServer(app);

app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(cookieParser());
app.use(bodyParser.urlencoded({ extended: true }));

//making paths
app.use(express.static(path.join(__dirname, '..', 'public')));

app.get('/', function (req, res) { res.sendFile(path.join(__dirname, '..', 'public', 'html', 'login.html'));});
app.get('/javascripts/main.js', function (req, res) { res.sendFile(path.join(__dirname, 'javascripts', 'main.js'));});
app.get('/html/settings.html', function (req, res) { res.sendFile(path.join(__dirname, 'settings.html'));});
app.get('/success', function (req, res) { res.sendFile(path.join(__dirname, '..', 'public', 'html', 'homepage.html'));});
app.get('/stylesheets/style.css', function (req, res) { res.sendFile(path.join(__dirname, '..', 'public', 'stylesheets', 'style.css'));});
app.get('/images/', function (req, res) { res.sendFile(path.join(__dirname, '..', 'public', 'images'));});
//destroy session when logging out
app.post('/logout', (req, res) => { req.session.destroy(); res.redirect('/html/login.html');});

//logging in
app.post('/submit', async (req, res) => {
  try {
    const { userName, passWord } = req.body;    
    const connection = mysql.createConnection(config);
    
    const [existingUsers] = await connection
      .promise()
      .query('SELECT * FROM members WHERE members.email = ? AND members.password = ?', [userName, passWord]);

      if (existingUsers.length > 0) {
        const memberID = existingUsers[0].memberID;
        req.session.userID = memberID;
        req.session.userName = userName;
        const encodedUserName = encodeURIComponent(userName);
        res.status(200).json({ success: true, username: encodedUserName });
      } 
      else {
        console.error('Invalid credentials.');
        res.status(401).json({ success: false, message: 'Invalid credentials' });
      }
    connection.end();
  } 
  catch (error) {
    console.error('Error handling login:', error);
    res.status(500).json({ success: false, message: 'Internal Server Error' });
  }
});

//creating a new account
app.post('/addNewMember', async (req, res) => {
  try {
    const { forename, surname, email, phoneNumber, gender, password } = req.body;
    const connection = mysql.createConnection(config);

    const [checkUserExistence] = await connection
    .promise()
    .query('SELECT members.email, members.phoneNumber FROM members WHERE members.email = ? AND members.phoneNumber = ?', 
    [email, phoneNumber]);
  
    if (checkUserExistence.length === 0 && connection)
    {
      const [addUserInfo] = await connection
        .promise()
        .query('INSERT INTO members (members.forename, members.surname, members.email, members.phoneNumber, members.gender, members.password) VALUES (?, ?, ?, ?, ?, ?)', 
        [forename, surname, email, phoneNumber, gender, password]);
      connection.end();
      res.json(addUserInfo);
    }
    else 
    {
      res.status(404).send('User already exists.');
    }
  } 
  catch (error) {
      console.error('Error creating new account:', error);
      res.status(500).send('Internal Server Error');
  }
});

//retrieve classrooms that the user belongs to
app.get('/classrooms', async (req, res) => {
  try {
    const connection = mysql.createConnection(config);
    const userID = req.session.userID;

    const [classrooms] = await connection.promise().query('SELECT * FROM classroom, junction_classroommembers, members WHERE junction_classroommembers.fk_classroomID = classroom.classroomID AND members.memberID = junction_classroommembers.fk_memberID AND members.memberID = ?', [userID]);
    connection.end();
    res.json(classrooms);
  } 
  catch (error) {
    console.error('Error fetching classrooms:', error);
    res.status(500).send('Internal Server Error');
  }
});

//retrieve groupchats that the user belongs to
app.get('/groupchats', async (req, res) => {
  try {
    const connection = mysql.createConnection(config);
    const userID = req.session.userID;
    //console.log(req.session.userID);
    //console.log("User id from session", userID);

    const [groupchats] = await connection.promise().query('SELECT * FROM groupchat, junction_groupchatmembers, members WHERE junction_groupchatmembers.groupchatID = groupchat.groupchatID AND members.memberID = junction_groupchatmembers.memberID AND members.memberID = ?', [userID]);
    connection.end();
    res.json(groupchats);
  } 
  catch (error) {
    console.error('Error fetching groupchats:', error);
    res.status(500).send('Internal Server Error');
  }
});

//retrieve classroom information
app.get('/getClassroomFromID', async (req, res) => {
  try {
      const connection = mysql.createConnection(config);
      const classroomID = req.query.classroomID;

      const [classroomInfo] = await connection
          .promise()
          .query('SELECT * FROM classroom WHERE classroomID = ?', [classroomID]);
      connection.end();
      res.json(classroomInfo);
  } catch (error) {
      console.error('Error fetching classroom info:', error);
      res.status(500).send('Internal Server Error');
  }
});

//retrieve members from classroom VIA classroomID
app.get('/getClassroomMembersFromID', async (req, res) => {
  try {
      const connection = mysql.createConnection(config);
      const classroomID = req.query.classroomID;

      const [classroomInfo] = await connection
          .promise()
          .query('SELECT * FROM junction_classroommembers, classroom, members WHERE junction_classroommembers.fk_classroomID = classroom.classroomID AND junction_classroommembers.fk_memberID = members.memberID AND classroom.classroomID = ? GROUP BY members.memberID', [classroomID]);
      connection.end();
      res.json(classroomInfo);
  } catch (error) {
      console.error('Error fetching classroom members:', error);
      res.status(500).send('Internal Server Error');
  }
});

//retrieve managers from classroom
app.get('/getIsManagerFromIDs', async (req, res) => {
  try {
      const connection = mysql.createConnection(config);
      const classroomID = req.query.classroomID;
      const memberID = req.query.memberID;

      const [junctionData] = await connection
          .promise()
          .query('SELECT * FROM junction_classroommembers, members, classroom WHERE junction_classroommembers.fk_classroomID = classroom.classroomID AND junction_classroommembers.fk_memberID = members.memberID AND classroom.classroomID = ? AND junction_classroommembers.isManager = 1 AND members.memberID = ?', [classroomID, memberID]);
      connection.end();
      res.json(junctionData);
  } 
  catch (error) {
      console.error('Error fetching managers of classroom:', error);
      res.status(500).send('Internal Server Error');
  }
});

//retrieve groupchat information VIA groupchatID
app.get('/getGroupchatFromID', async (req, res) => {
  try {
      const connection = mysql.createConnection(config);
      const groupchatID = req.query.groupchatID;

      const [groupchatInfo] = await connection
          .promise()
          .query('SELECT * FROM groupchat WHERE groupchatID = ?', [groupchatID]);

      connection.end();
      res.json(groupchatInfo);
  } catch (error) {
      console.error('Error fetching groupchat info:', error);
      res.status(500).send('Internal Server Error');
  }
});

//retrieve classroom channels VIA classroomID
app.get('/getChannelsFromID', async (req, res) => {
  try {
      
      const connection = mysql.createConnection(config);
      const classroomID = req.query.classroomID;

      const [channels] = await connection
          .promise()
          .query('SELECT * FROM classroomchannels, classroom WHERE classroomchannels.classroomID = classroom.classroomID AND classroom.classroomID = ?', [classroomID]);
      connection.end();
      res.json(channels);
  } 
  catch (error) {
      console.error('Error fetching classroom channels:', error);
      res.status(500).send('Internal Server Error');
  }
});

//retrieve managers VIA classroomID
app.get('/getManagersFromID', async (req, res) => {
  try {
      const connection = mysql.createConnection(config);
      const classroomID = req.query.classroomID;
      
      const [channels] = await connection
          .promise()
          .query('SELECT * FROM junction_classroommembers, members, classroom WHERE junction_classroommembers.fk_classroomID = classroom.classroomID AND junction_classroommembers.fk_memberID = members.memberID AND classroom.classroomID = ? AND isManager = 1', [classroomID]);
      connection.end();
      res.json(channels);
  } 
  catch (error) {
      console.error('Error fetching managers of classroom:', error);
      res.status(500).send('Internal Server Error');
  }
});

//retrieve the members of a groupchat
app.get('/getGroupchatMembersFromID', async (req, res) => {
  try {
      
      const connection = mysql.createConnection(config);
      const groupchatID = req.query.groupchatID;

      const [groupchatInfo] = await connection
          .promise()
          .query('SELECT members.memberID, members.name, members.email FROM members, junction_groupchatmembers, groupchat WHERE junction_groupchatmembers.groupchatID = groupchat.groupchatID AND members.memberID = junction_groupchatmembers.memberID AND groupchat.groupchatID = ? GROUP BY members.memberID', [groupchatID]);
      connection.end();

      res.json(groupchatInfo);
  } catch (error) {
      console.error('Error fetching groupchat members:', error);
      res.status(500).send('Internal Server Error');
  }
});

//retrieve the chatlog of all users for a groupchat
app.get('/getGroupchatChatlog', async (req, res) => {
  try {
      const connection = mysql.createConnection(config);
      const groupchatID = req.query.groupchatID;
      //console.log("groupchat id:" + req.query.groupchatID);
      
      const [groupchatLogInfo] = await connection
          .promise()
          .query('SELECT messages_groupchat.messages_groupchat_ID, messages_groupchat.memberID, messages_groupchat.messages_groupchat_timestamp, messages_groupchat.messages_groupchat_content FROM messages_groupchat, groupchat WHERE messages_groupchat.groupchatID = groupchat.groupchatID AND groupchat.groupchatID = ?', [groupchatID]);
      connection.end();
      
      res.json(groupchatLogInfo);
  } 
  catch (error) {
      console.error('Error fetching groupchat`s chatlog (ALL USERS):', error);
      res.status(500).send('Internal Server Error');
  }
});

//retrieves the channel of a classroom's chatlog (messages)
app.get('/getChannelChatlog', async (req, res) => {
  try {
      const connection = mysql.createConnection(config);
      const channelID = req.query.channelID;
      //console.log("groupchat id:" + req.query.groupchatID);
      
      const [groupchatLogInfo] = await connection
          .promise()
          .query('SELECT * FROM messages_channel, classroomchannels WHERE messages_channel.channelID = classroomchannels.channelID AND classroomchannels.channelID = ?', [channelID]);
      connection.end();

      res.json(groupchatLogInfo);
  } 
  catch (error) {
      console.error('Error fetching classroom`s channel chatlog (ALL USERS):', error);
      res.status(500).send('Internal Server Error');
  }
});

//retrieves user's messages sent to the channel of a classroom's chatlog (messages)
app.get('/getGroupchatChatlog_userOnly', async (req, res) => {
  try {
      const connection = mysql.createConnection(config);
      const groupchatID = req.query.groupchatID;
      const memberID = req.query.memberID;
      //console.log('groupchat: ' + groupchatID);
      //console.log('memberID: ' + memberID);
      //console.log("groupchat id:" + req.query.groupchatID);

      
      const [groupchatLogInfo] = await connection
          .promise()
          .query('SELECT messages_groupchat.messages_groupchat_ID, messages_groupchat.memberID, messages_groupchat.messages_groupchat_timestamp, messages_groupchat.messages_groupchat_content FROM messages_groupchat, groupchat WHERE messages_groupchat.groupchatID = groupchat.groupchatID AND groupchat.groupchatID = ? AND messages_groupchat.memberID = ?', [groupchatID, memberID]);
      connection.end();
      
      res.json(groupchatLogInfo);
  } 
  catch (error) {
      console.error('Error fetching chatlog of groupchat (USER ONLY MESSAGES):', error);
      res.status(500).send('Internal Server Error');
  }
});

//retrieves user's messages sent to the channel of a classroom's chatlog (messages)
app.get('/getChannelChatlog_userOnly', async (req, res) => {
  try {
      const connection = mysql.createConnection(config);
      const channelID = req.query.channelID;
      const memberID = req.query.memberID;
      //console.log('channel: ' + channelID);
      //console.log('memberID: ' + memberID);
      //console.log("channel id:" + req.query.channelID);
      
      const [groupchatLogInfo] = await connection
          .promise()
          .query('SELECT * FROM messages_channel WHERE messages_channel.channelID = ? AND messages_channel.memberID = ?', [channelID, memberID]);
      connection.end();

      res.json(groupchatLogInfo);
  } 
  catch (error) {
      console.error('Error fetching channel log (USER ONLY MESSAGES):', error);
      res.status(500).send('Internal Server Error');
  }
});

//retrieve the user's data using their email/username
app.get('/retrieveUserinfo', async (req, res) => {
  try {
      const connection = mysql.createConnection(config);
      const email = req.session.userName;

      const [userData] = await connection
          .promise()
          .query('SELECT * FROM members WHERE email=? GROUP BY members.memberID', [email]);
      connection.end();
      res.json(userData);
  } 
  catch (error) {
      console.error('Error fetching user info VIA username/email:', error);
      res.status(500).send('Internal Server Error');
  }
});

//retrieve the user's data, uses query within fetch(...) request
app.get('/retrieveUserinfoQUERY', async (req, res) => {
  try {
      const connection = mysql.createConnection(config);
      const email = req.query.email;
      //console.log('memberID: ' + email);

      const [userData] = await connection
          .promise()
          .query('SELECT * FROM members WHERE email=? GROUP BY members.memberID', [email]);
      connection.end();
      res.json(userData);
  } 
  catch (error) {
      console.error('Error fetching user info VIA email/username VIA QUERY:', error);
      res.status(500).send('Internal Server Error');
  }
});

//retrieve the user's data using their memberID
app.get('/retrieveUserinfoID', async (req, res) => {
  try {
      const connection = mysql.createConnection(config);
      const memberID = req.query.memberID;
      //sconsole.log('memberID: ' + memberID);
      
      const [userData] = await connection
          .promise()
          .query('SELECT * FROM members WHERE memberID=? GROUP BY members.memberID', [memberID]);
      connection.end();

      res.json(userData);
  } catch (error) {
      console.error('Error fetching user`s info VIA memberID:', error);
      res.status(500).send('Internal Server Error');
  }
});

//adding a message to a groupchat
app.post('/addGroupchatMessage', async (req, res) => {
  try {
      const { text, memberID, groupchatID } = req.body;
      const connection = mysql.createConnection(config);
      //console.log("member id:" + memberID);
      //console.log("text:" + text);

      const [groupchatInfo] = await connection
          .promise()
          .query('INSERT INTO messages_groupchat (messages_groupchat.groupchatID, messages_groupchat.memberID, messages_groupchat.messages_groupchat_content) VALUES (?, ?, ?)', [groupchatID, memberID, text]);
      connection.end();

      
      res.json(groupchatInfo);
  } 
  catch (error) {
      console.error('Error adding message to groupchat:', error);
      res.status(500).send('Internal Server Error');
  }
});

//adding a message to a classroom's channel
app.post('/addChannelMessage', async (req, res) => {
  try {
      const { text, memberID, channelID } = req.body;
      const connection = mysql.createConnection(config);
      
      const [groupchatInfo] = await connection
          .promise()
          .query('INSERT INTO messages_channel (messages_channel.channelID, messages_channel.memberID, messages_channel.message_channel_content) VALUES (?, ?, ?)', [channelID, memberID, text]);
      
      connection.end();
      res.json(groupchatInfo);
  } 
  catch (error) {
      console.error('Error adding message to channel:', error);
      res.status(500).send('Internal Server Error');
  }
});

//remove a message from a groupchat
app.post('/removeGroupchatMessage', async (req, res) => {
  try {
      const { messages_groupchat_ID } = req.body;
      const connection = mysql.createConnection(config);
      //console.log("message id:" + messages_groupchat_ID);

      const [msgInfo] = await connection
          .promise()
          .query('DELETE FROM messages_groupchat WHERE messages_groupchat_ID = ?', [messages_groupchat_ID])
      connection.end();
      res.json(msgInfo);
    } 
    catch (error) {
      console.error('Error removing message from groupchat:', error);
      res.status(500).send('Internal Server Error');
    }
});

//remove a message from a classroom's channel
app.post('/removeChannelMessage', async (req, res) => {
  try {
      const { messages_channel_ID } = req.body;
      const connection = mysql.createConnection(config);
      //console.log("message id:" + messages_channel_ID);

      const [msgInfo] = await connection
          .promise()
          .query('DELETE FROM messages_channel WHERE message_channel_ID = ?', [messages_channel_ID])

      connection.end();
      res.json(msgInfo);
  } 
  catch (error) {
      console.error('Error removing message from channel:', error);
      res.status(500).send('Internal Server Error');
  }
});

//removing a member from a groupchat
app.post('/removeGroupchatMember', async (req, res) => {
  try {
      const { memberID, groupchatID } = req.body;
      const connection = mysql.createConnection(config);
      //console.log("member deleted id:" + memberID);

      const [msgInfo] = await connection
          .promise()
          .query('DELETE FROM junction_groupchatmembers WHERE memberID = ? AND groupchatID = ?', [memberID, groupchatID])
      connection.end();
      
      res.json(msgInfo);
  } 
  catch (error) 
  {
      console.error('Error removing user from groupchat:', error);
      res.status(500).send('Internal Server Error');
  }
});

//removing a user from a classroom
app.post('/removeClassroomMember', async (req, res) => {
  try {
      const { memberID, classroomID } = req.body;
      const connection = mysql.createConnection(config);
      //console.log("member deleted id:" + memberID);

      const [msgInfo] = await connection
          .promise()
          .query('DELETE FROM junction_classroommembers WHERE fk_memberID = ? AND fk_classroomID = ?', [memberID, classroomID])

      connection.end();
      res.json(msgInfo);
  } 
  catch (error) {
      console.error('Error removing user from classroom:', error);
      res.status(500).send('Internal Server Error');
  }
});

//adding a user to a groupchat
app.post('/addGroupchatMember', async (req, res) => {
  try {
      const { memberID, groupchatID } = req.body;
      const connection = mysql.createConnection(config);

      const [checkUseGroupchatExistence] = await connection
          .promise()
          .query('SELECT members.memberID, groupchat.groupchatID FROM members, groupchat WHERE members.memberID = ? AND groupchat.groupchatID = ?', [memberID, groupchatID])
        
      if (checkUseGroupchatExistence && connection)
      {
        const [msgInfo] = await connection
          .promise()
          .query('INSERT INTO junction_groupchatmembers (junction_groupchatmembers.memberID, junction_groupchatmembers.groupchatID) VALUES (?, ?)', [memberID, groupchatID])
          connection.end();
          res.json(msgInfo);
      }
      else 
      {
        res.status(404).send('Unable to find user.');
      }
  } 
  catch (error) {
      console.error('Error adding member to groupchat:', error);
      res.status(500).send('Internal Server Error');
  }
});

//adding a channel to a classroom
app.post('/addChannel', async (req, res) => 
{
  try 
  {
      const { classroomID, channelName, channelDesc } = req.body;
      const connection = mysql.createConnection(config);

      const [checkUseGroupchatExistence] = await connection
        .promise()
        .query('SELECT classroom.classsroomID FROM classroom WHERE classroom.classroomID = ?', [classroomID])
        
      if (checkUseGroupchatExistence && connection)
      {
        const [msgInfo] = await connection
          .promise()
          .query('INSERT INTO classroomchannels (classroomchannels.classroomID, classroomchannels.channelName, classroomchannels.channelDescription) VALUES (?, ?, ?)', [classroomID, channelName, channelDesc])

        connection.end();
        res.json(msgInfo);
      }
      else 
      {
        res.status(404).send('Unable to find user.');
      }
  } 
  catch (error) 
  {
      console.error('Error adding a channel to the classroom:', error);
      res.status(500).send('Internal Server Error');
  }
});

//add a user to a classroom
app.post('/addClassroomMember', async (req, res) => {
  try {
      const { memberID, classroomID } = req.body;
      const connection = mysql.createConnection(config);
      //console.log("member deleted id:" + memberID);

      
      const [checkUseGroupchatExistence] = await connection
          .promise()
          .query('SELECT members.memberID, classroom.classroomID FROM members, classroom WHERE members.memberID = ? AND classroom.classroomID = ?', [memberID, classroomID])

      if (checkUseGroupchatExistence && connection)
      {
        const [msgInfo] = await connection
          .promise()
          .query('INSERT INTO junction_classroommembers (junction_classroommembers.fk_memberID, junction_classroommembers.fk_classroomID) VALUES (?, ?)', [memberID, classroomID])
          connection.end();
          res.json(msgInfo);
      }
      else 
      {
        res.status(404).send('Unable to find user.');
      }
  } catch (error) {
      console.error('Error adding user to groupchat:', error);
      res.status(500).send('Internal Server Error');
  }
});

//create a groupchat
app.post('/createGroupchat', async (req, res) => {
  try {
      const { memberID, groupchatName } = req.body;
      const connection = mysql.createConnection(config);

      const [addgroupchat] = await connection
          .promise().query('INSERT INTO groupchat (groupchat.groupchatName) VALUES (?);', [groupchatName])

          const [getgcid] = await connection.promise().query(
            'SELECT LAST_INSERT_ID() AS groupchatID'
          )
      const addusertoGC = await connection.promise().query('INSERT INTO junction_groupchatmembers (junction_groupchatmembers.groupchatID, junction_groupchatmembers.memberID) VALUES (?, ?)', [getgcid[0].groupchatID, memberID])

      res.json(getgcid[0].groupchatID);
  } 
  catch (error) {
      console.error('Error creating a groupchat:', error);
      res.status(500).send('Internal Server Error');
  }
});

//delete a groupchat
app.post('/deleteGroupchat', async (req, res) => {
  try {
      const { groupchatID } = req.body;
      const connection = mysql.createConnection(config);

      await connection.promise().query('DELETE FROM junction_groupchatmembers WHERE groupchatID = ?', [ groupchatID]);
      await connection.promise().query('DELETE FROM messages_groupchat WHERE groupchatID = ?', [groupchatID]);      
      await connection.promise().query('DELETE FROM groupchat WHERE groupchatID = ?', [groupchatID]);

      const confirm = 'yes';
      res.json(confirm);
  } 
  catch (error) {
      console.error('Error deleting groupchat:', error);
      res.status(500).send('Internal Server Error');
  }
});

//remove/delete a user from a groupchat
app.post('/deleteUser', async (req, res) => {
  try {
      const { memberID } = req.body;
      const connection = mysql.createConnection(config);

      await connection.promise().query('DELETE FROM messages_channel WHERE memberID = ?', [memberID]);
      await connection.promise().query('DELETE FROM messages_groupchat WHERE memberID = ?', [memberID]);
      await connection.promise().query('DELETE FROM junction_classroommembers WHERE fk_memberID = ?', [memberID]);
      await connection.promise().query('DELETE FROM junction_groupchatmembers WHERE memberID = ?', [memberID]);
      await connection.promise().query('DELETE FROM members WHERE memberID = ?', [memberID]);

      const confirm = 'yes';
      connection.end();
      res.json(confirm);
  } 
  catch (error) {
      console.error('Error deleting user:', error);
      res.status(500).send('Internal Server Error');
  }
});

//delete a classroom
app.post('/deleteClassroom', async (req, res) => 
{
  try {
      const { classroomID } = req.body;
      const connection = mysql.createConnection(config);

      await connection.promise().query('DELETE FROM junction_classroommembers WHERE fk_classroomID = ?', [classroomID]);      
      await connection.promise().query('DELETE FROM classroomchannels WHERE classroomID = ?', [classroomID]);
      await connection.promise().query('DELETE FROM classroom WHERE classroomID = ?', [classroomID]);

      const confirm = 'yes';
      res.json(confirm);

  } 
  catch (error) {
      console.error('Error fetching groupchat info:', error);
      res.status(500).send('Internal Server Error');
  }
});

//delete a channel from a classroom
app.post('/deleteChannel', async (req, res) => {
  try {
      const { channelID } = req.body;
      const connection = mysql.createConnection(config);

      await connection.promise().query('DELETE FROM classroomchannels WHERE channelID = ?', [channelID]);

      const confirm = 'yes';
      res.json(confirm);

  } 
  catch (error) {
      console.error('Error deleting the channel:', error);
      res.status(500).send('Internal Server Error');
  }
});

//returns the session's username, which is the email of the user
app.get('/email', (req, res) => 
{
  const username = req.session.userName;
  res.json({username});
});

app.post('/createClassroom', async (req, res) => {
  try {
    //make member a manager
    const { memberID, classroomName, classroomDescription } = req.body;
      const connection = mysql.createConnection(config);

      const [addClassroom] = await connection
          .promise().query('INSERT INTO classroom (classroom.classroomName, classroom.classroomDescription) VALUES (?, ?);', [classroomName, classroomDescription])
      
          const [getgcid] = await connection.promise().query(
            'SELECT LAST_INSERT_ID() AS classroomID'
          )

      //add user to classroom + as a manager
      const addusertoGC = await connection
      .promise().query('INSERT INTO junction_classroommembers (junction_classroommembers.fk_classroomID, junction_classroommembers.fk_memberID, junction_classroommembers.isManager) VALUES (?, ?, ?)', [getgcid[0].classroomID, memberID, '1'])

      res.json(getgcid[0].groupchatID);
  } 
  catch (error) {
      console.error('Error creating a groupchat:', error);
      res.status(500).send('Internal Server Error');
  }
});

// *POSTING IN CLASSROOM DISCUSSION BOARD* //

//adding posts to a discussion board
app.post('/addPost', async (req, res) => {
  try {
      const { memberID, classroomID, postTitle, postContent, inputFile } = req.body;
      
      const connection = mysql.createConnection(config);
      console.log(inputFile);
        if(inputFile) {
            console.log("file post being made...");
            const [discussionPostFile] = await connection
          .promise()
          .query('INSERT INTO post (post.classroomID, post.memberID, post.postTitle, post.postContent, post.postFile) VALUES (?, ?, ?, ?, ?)', [classroomID, memberID, postTitle, postContent, inputFile]);
          res.json(discussionPostFile);
          return;
        } 
        else if (!inputFile)
        {
            const [discussionPostInfo] = await connection
          .promise()
          .query('INSERT INTO post (post.classroomID, post.memberID, post.postTitle, post.postContent) VALUES (?, ?, ?, ?)', [classroomID, memberID, postTitle, postContent]);
          res.json(discussionPostInfo);
          return;
        }
        
        connection.end();
  } 
  catch (error) {
      console.error('Error adding post to classroom discussion board:', error);
      res.status(500).send('Internal Server Error');
  }
});

//remove post from discussion board
app.post('/removePost', async (req, res) => {
  try {
      const { postID } = req.body;
      const connection = mysql.createConnection(config);
      
      const [discussionPostInfo] = await connection
          .promise()
          .query('DELETE FROM post WHERE post.postID = ?', [postID]);
      
      connection.end();
      res.json(discussionPostInfo);
  } 
  catch (error) {
      console.error('Error removing post from classroom discussion board:', error);
      res.status(500).send('Internal Server Error');
  }
});

//update post title+contents
app.post('/updatePostTitleContents', async (req, res) => {
  try {
      const { postID, postTitle, postContent } = req.body;
      const connection = mysql.createConnection(config);
      
      const [discussionPostInfo] = await connection
          .promise()
          .query('UPDATE post SET post.postTitle = ?, post.postContent = ? WHERE post.postID = ?', [postTitle, postContent, postID]);
      
      connection.end();
      res.json(discussionPostInfo);
  } 
  catch (error) {
      console.error('Error adding post to classroom discussion board:', error);
      res.status(500).send('Internal Server Error');
  }
});

//get all posts by classroomID
app.get('/getPosts', async (req, res) => {
  try {
      const connection = mysql.createConnection(config);
      const classroomID = req.query.classroomID;

      //console.log(classroomID);

      const [channels] = await connection
          .promise()
          .query('SELECT post.postID, post.postTitle, post.postContent, post.postFile, post.memberID FROM post JOIN classroom ON post.classroomID = classroom.classroomID WHERE classroom.classroomID = ? GROUP BY post.postID;', [classroomID]);
      connection.end();

      //console.log("Fetched channels:", channels);
      res.json(channels);
  } 
  catch (error) {
      console.error('Error fetching classroom discussion board posts:', error);
      res.status(500).send('Internal Server Error');
  }
});

//only get posts made by user, memberID, classroomID
app.get('/getPostsBYMEMBER', async (req, res) => {
  try {
      
      const connection = mysql.createConnection(config);
      const classroomID = req.query.classroomID;
      const memberID = req.query.memberID;

      const [channels] = await connection
          .promise()
          .query('SELECT * FROM post, classroom WHERE post.classroomID = classroom.classroomID AND classroom.classroomID = ? AND post.memberID = ?', [classroomID, memberID]);
      connection.end();
      res.json(channels);
  } 
  catch (error) {
      console.error('Error fetching classroom discussion board posts:', error);
      res.status(500).send('Internal Server Error');
  }
});

//get post file by postID
app.get('/getPostFile', async (req, res) => {
  try {
      const connection = mysql.createConnection(config);
      const postID = req.query.postID;

      const [post] = await connection
          .promise()
          .query('SELECT post.postFile FROM post WHERE post.postID = ?', [postID]);
      connection.end();
      res.json(post);
  } 
  catch (error) {
      console.error('Error fetching post`s file:', error);
      res.status(500).send('Internal Server Error');
  }
});

//get ALL post file by memberID (for brainframe)
app.get('/getPostsBYMEMBERONLY', async (req, res) => {
  try {
      
      const connection = mysql.createConnection(config);
      const memberID = req.query.memberID;

      const [postData] = await connection
          .promise()
          .query('SELECT * FROM post, members WHERE post.memberID = members.memberID AND post.memberID = ?', [memberID]);
      connection.end();
      res.json(postData);
  } 
  catch (error) {
      console.error('Error fetching classroom discussion board posts:', error);
      res.status(500).send('Internal Server Error');
  }
});

//report groupchat message
app.post('/reportGroupchatMessage', async (req, res) => {
  try {
      const { messages_groupchat_ID, messages_groupchat_content, memberID, r1, r2, r3, r4, r5, r6 } = req.body;
      const connection = mysql.createConnection(config);
      
      const [discussionPostInfo] = await connection
          .promise()
          .query('INSERT INTO reportMsg (reportMsg_originalMsg_ID, reportMsg_text, reportMsg_memberID, reportMsg_abuseHarassment, reportMsg_InnappropriateContent, reportMsg_ThreateningBehaviour, reportMsg_Spam, reportMsg_privateIdentifyingInfo, reportMsg_misinformation, reportMsg_inChannel) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)', [messages_groupchat_ID, messages_groupchat_content, memberID, r1, r2, r3, r4, r5, r6, 'N']);
      
        const [msgInfo] = await connection
          .promise()
          .query('DELETE FROM messages_groupchat WHERE messages_groupchat_ID = ?', [messages_groupchat_ID])

      connection.end();
      res.json(discussionPostInfo);
  } 
  catch (error) {
      console.error('Error reporting groupchat message:', error);
      res.status(500).send('Internal Server Error');
  }
});

//report channel message
app.post('/reportChannelsMessage', async (req, res) => {
  try {
      const { messages_channel_ID, messages_channel_content, memberID, r1, r2, r3, r4, r5, r6 } = req.body;
      const connection = mysql.createConnection(config);
      
      const [discussionPostInfo] = await connection
          .promise()
          .query('INSERT INTO reportMsg (reportMsg_originalMsg_ID, reportMsg_text, reportMsg_memberID, reportMsg_abuseHarassment, reportMsg_InnappropriateContent, reportMsg_ThreateningBehaviour, reportMsg_Spam, reportMsg_privateIdentifyingInfo, reportMsg_misinformation, reportMsg_inChannel) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)', [messages_channel_ID, messages_channel_content, memberID, r1, r2, r3, r4, r5, r6, 'Y']);
      
        const [msgInfo] = await connection
          .promise()
          .query('DELETE FROM messages_channel WHERE message_channel_ID = ?', [messages_channel_ID])

      connection.end();
      res.json(discussionPostInfo);
  } 
  catch (error) {
      console.error('Error reporting channel message:', error);
      res.status(500).send('Internal Server Error');
  }
});


//report post
app.post('/reportPost', async (req, res) => {
  try {
      const { post_ID, memberID, postTitle, postContent, postFile, r1, r2, r3, r4, r5, r6 } = req.body;
      const connection = mysql.createConnection(config);
      
      const [discussionPostInfo] = await connection
          .promise()
          .query('INSERT INTO reportPost (reportPost_originalPost_ID, reportPost_title, reportPost_bodytext, reportPost_file, reportPost_memberID, reportPost_abuseHarassment, reportPost_InnappropriateContent, reportPost_ThreateningBehaviour, reportPost_Spam, reportPost_privateIdentifyingInfo, reportPost_misinformation) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)', [post_ID, postTitle, postContent, postFile, memberID, r1, r2, r3, r4, r5, r6]);
      
        const [msgInfo] = await connection
          .promise()
          .query('DELETE FROM post WHERE postID = ?', [post_ID])

      connection.end();
      res.json(discussionPostInfo);
  } 
  catch (error) {
      console.error('Error reporting channel message:', error);
      res.status(500).send('Internal Server Error');
  }
});

// SETTINGS //

//change the user's email
app.post('/changeEmail', async (req, res) => 
{
  try 
  {
    const { memberID, newEmail } = req.body;
    const connection = mysql.createConnection(config);
  
    const [checkUseGroupchatExistence] = await connection
        .promise()
        .query('UPDATE members SET email = ? WHERE memberID = ?;', [newEmail,memberID,])

    connection.end();
    res.json(checkUseGroupchatExistence);
  } 
  catch (error) 
  {
      console.error('Error changing user`s email:', error);
      res.status(500).send('Internal Server Error');
  }
});

//change the user's password
app.post('/changePassword', async (req, res) => 
{
  try 
  {
    const { memberID, newPassword } = req.body;
    const connection = mysql.createConnection(config);
  
    const [checkUseGroupchatExistence] = await connection
        .promise()
        .query('UPDATE members SET password = ? WHERE memberID = ?;', [newPassword,memberID,])

    connection.end();
    res.json(checkUseGroupchatExistence);
  } 
  catch (error) 
  {
      console.error('Error changing user`s password:', error);
      res.status(500).send('Internal Server Error');
  }
});

//change the user's surname
app.post('/changeSurname', async (req, res) => 
{
  try 
  {
    const { memberID, newSurname } = req.body;
    const connection = mysql.createConnection(config);
  
    const [checkUseGroupchatExistence] = await connection
        .promise()
        .query('UPDATE members SET surname = ? WHERE memberID = ?;', [newSurname,memberID,])

    connection.end();
    res.json(checkUseGroupchatExistence);
  } 
  catch (error) 
  {
      console.error('Error changing user`s surname:', error);
      res.status(500).send('Internal Server Error');
  }
});

//change the user's surname
app.post('/changeForename', async (req, res) => 
{
  try 
  {
    const { memberID, newForename } = req.body;
    const connection = mysql.createConnection(config);
  
    const [checkUseGroupchatExistence] = await connection
        .promise()
        .query('UPDATE members SET forename = ? WHERE memberID = ?;', [newForename,memberID,])

    connection.end();
    res.json(checkUseGroupchatExistence);
  } 
  catch (error) 
  {
      console.error('Error changing user`s forename:', error);
      res.status(500).send('Internal Server Error');
  }
});

app.post('/changePhoneNum', async (req, res) => 
{
  try 
  {
    const { memberID, newPhoneNum } = req.body;
    const connection = mysql.createConnection(config);
  
    const [checkUseGroupchatExistence] = await connection
        .promise()
        .query('UPDATE members SET phoneNumber = ? WHERE memberID = ?;', [newPhoneNum,memberID,])

    connection.end();
    res.json(checkUseGroupchatExistence);
  } 
  catch (error) 
  {
      console.error('Error changing user`s phone number:', error);
      res.status(500).send('Internal Server Error');
  }
});

app.post('/changeGender', async (req, res) => 
{
  try 
  {
    const { memberID, gender } = req.body;
    const connection = mysql.createConnection(config);
  
    const [checkUseGroupchatExistence] = await connection
        .promise()
        .query('UPDATE members SET gender = ? WHERE memberID = ?;', [gender,memberID,])

    connection.end();
    res.json(checkUseGroupchatExistence);
  } 
  catch (error) 
  {
      console.error('Error changing user`s phone number:', error);
      res.status(500).send('Internal Server Error');
  }
});

//change a post

//change a channel message

//change a groupchat message


app.use(function (req, res, next) 
{
  next(createError(404));
});


app.use(function (req, res, next) 
{
  next(createError(404));
});


app.use(function (err, res) 
{
  console.error(err.stack);
  res.status(err.status || 500).send('Internal Server Error');
});

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

//event listener for HTTP server errors
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
  
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}
//event listener for HTTP server listening
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}